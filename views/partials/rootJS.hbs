<script>

$(document).pjax('a[data-pjax]', '#pjax-container');

$.pjax.defaults.scrollTo = false;
$.pjax.defaults.timeout = false;

let hideMe = function(elem) {

    let col  = {
        no: $("th").index(elem),
        name: $(elem).html(),
        index: $(elem).attr("index")
    };

    console.log({col});

    $(elem).addClass("d-none");
    $(`.${col.index}`).addClass("d-none");

    let span = `<span index=${col.index} onclick=showMe(this)>${col.name}</span>`;
    $("#hiddenFields").html( $("#hiddenFields").html() + span );

};

let showMe = function(elem) {

    let index = $(elem).attr("index");

    $(elem).remove();
    $(`tr > [index=${index}]`).removeClass("d-none");
    $(`.${index}`).removeClass("d-none");

}

let createForm = function(elem) {

    let constructData = function(row) {

        let headings = $(".headings").get().map( val => {
            return {
                heading: $(val).attr("formname") ,
                index: $(val).attr("index")
            };

        });

        let mydata = headings.reduce( (total, val) => {

            // TODO: SAVE IN THE HTML
            if ($(`#${row} > .${val.index}`).hasClass("page")) {
                Object.assign( total, {
                    [val.heading] : $(`#${row} > .${val.index}`).attr("mydata")
                });
            } else {
                Object.assign( total, {
                    [val.heading] : $(`#${row} > .${val.index}`).html()
                });
            }

            return total;

        },{});

        console.log( mydata );

        return mydata;

    };

    let data = constructData( $(elem).closest("tr").attr("id") );

    let schema = JSON.parse( $(elem).closest("table").attr("schema") );

    let elems = $(".headings").map( (key,val) => {
        switch (true) {
            case $(val).attr("formname") == "_id" :
                return {
                    label: "ID",
                    name: "_id",
                    type: "String",
                    html: "input",
                    addOn: "disabled",
                    value: data[ $(val).attr("formname") ]
                };
                break;
            default : 
                return {
                    label: $(val).html().toUpperCase(),
                    name: $(val).attr("formname"),
                    type: schema[ $(val).attr("formname") ].type,
                    html: schema[ $(val).attr("formname") ].html,
                    value: data[ $(val).attr("formname") ] || "",
                    addOn: `onkeyup=saveInput(this,'${data._id}','form')`
                }
        };
    }).get();

    let formString = elems.reduce( (total,val, key) => { 
        // console.log(val,key);
            if (val.html == 'ckEditor') {
                total = total + `
                   <label for="${val.name}">${val.label}</label>
                   <div id="editor" name="${val.name}">${val.value}</div>
                `;
            } else {
                total = total +  `
                    <label for="${val.name}">${val.label}</label>
                    <input type="${val.type}" name="${val.name}" ${val.addOn} value="${val.value}">
            `;
        }
        return total;
    },"");

    let form = `
        <form action="" row=${ $(elem).closest("tr").attr("id") }> 
            ${formString} 
            <button type="button" class="btn close" onclick="openLayer('.formBox', '.layerOne')">CLOSE</button> 
            <button type="button" class="btn saving d-none" disabled>SAVING...</button>
        </form>
        `;

    $(".layerOne").addClass("d-none");
    $(".formBox").html(form).removeClass("d-none");



    ClassicEditor
            .create( document.querySelector( "#editor" ) ,{
                simpleUpload: {
                    // The URL that the images are uploaded to.
                    uploadUrl: '/{{data.brand}}/admin/data/uploadImage/n',

                    // Enable the XMLHttpRequest.withCredentials property.
                    withCredentials: true,

                    // Headers sent along with the XMLHttpRequest to the upload server.
                    headers: {
                        'X-CSRF-TOKEN': 'CSRF-Token',
                        Authorization: 'Bearer <JSON Web Token>'
                    }
                },
            })
            .then( editor => {
                console.log( Array.from( editor.ui.componentFactory.names() ) );
                editor.model.document.on( "change:data", () => {
                    let editorData = editor.getData();
                    return saveInput("#editor",data._id,"ckEditor", editorData);
                } );
            } )
            .catch( error => {
                console.error( error );
        } );

    };

    let openLayer = function(elem, target) {

        $(elem).addClass("d-none");
        $(target).removeClass("d-none");

    };

    let saveInput = function(elem, _id, type, optData) {

        let changeConnectedData = function(row, value) {

            console.log( $(elem).attr("name") );

            let col = $(`[formname=${ $(elem).attr("name") }`).attr("index");

            console.log({ col, row });

            if ( type == "ckEditor" ) {
                $(`#${row} > .${col}`).addClass("page").attr({mydata: value}); 
                $(`#${row} > .${col}`).html(`<a class="icon" onclick="createForm(this)">
                            <i class="fas fa-expand-alt black"></i>
                        </a>
                    `);
            } else {
                $(`#${row} > .${col}`).html(value); 
            }

            return console.log("data changed in table also");

        };

        let data = {};
        switch (true) { 
            case (type == "ckEditor") :
                console.log(optData);
                changeConnectedData( $(elem).closest("form").attr("row"), `<div>${optData}</div>` );
                data[$(elem).attr("name")] = optData ;
                break;
            case (type == "form") : 
                changeConnectedData( $(elem).closest("form").attr("row"), $(elem).val() );
                data[$(elem).attr("name")] =  $(elem).val() ;
                break;
            case (type == "td" ) :
                let name = $(`[index=${ $(elem).attr("class") }`).attr("formname");
                if ( name == "_id" ) return; 
                data[name] = $(elem).html(); 
                break; 
        }

        console.log( {data, _id} );

        if ( _id == "" ) {
            _id = $(elem).closest("tr").find(".col0").html();
        }

        $(".btn.saving").html("SAVING...").removeClass("d-none");

        $.ajax({
            url: `/{{data.brand}}/admin/data/updateDocument/{{data.modelName}}?_id=${_id}`,
            method: "POST",
            data: data,
            success: val => {
                console.log(val);
                $(".btn.saving").addClass("d-none");
            },
            }).fail( val => {
                console.log(val);
                $(".btn.saving").html("Error while Saving");
            }); 

    };

    let addNewRow = function() {
        
        $.get("/{{data.brand}}/admin/data/getMongoId/n", function( data, status ){
            console.log(data, status);
            if (status != "success") return alert("could not get the id");
            $("tr:eq(-1)").clone().attr({id: "row" + ( $("tr").get().length - 1 )}).appendTo("tbody").removeClass("d-none")
                .find("td:not(:first-child)").html("").attr({onkeyup: `saveInput(this,'${data}','td')`})
                .closest("tr").find(".col0").html(data);
        });

    }

    let deleteMe = function(elem) {

        let _id = $(elem).closest("tr").find(".col0").html();

        $.get(`/{{data.brand}}/admin/data/deleteDocument/{{data.modelName}}?_id=${_id}`, function( data, status ) {

            console.log(data, status);
            if (status != "success") return alert("could not get the id"); 
            $(elem).closest("tr").remove();

        });


    };

    let toggleClass = function(elem, name) {
            $(elem).closest("div").find("*").removeClass("active");
            $(elem).toggleClass(name);
    };

    let openContainerLayer = function( close, open ) {

            $(".container > *").addClass("d-none");
            $(open).removeClass("d-none");

    };

    let saveAirtableUrls = function(elem) {

            let data = $(".airtableKeys").find("input").get().reduce( (total, val) => {
                    total = Object.assign( total, { 
                        [$(val).attr("name")] : $(val).val()
                    });
                    return total;
                }, {});

            let test = $(".airtableKeys").find("input").get().some( val => $(val).val() == "" );

            if (test == true) return $(elem).html("Missing fields! Try Again â†’");

            $(elem).html("Testing Values...");

            $.ajax({
                    url: `/{{data.brand}}/{{data.permit}}/data/saveAirtableURLs/{{data.input}}`,
                    method: "POST",
                    data: data,
                    success: val => {
                            $(elem).html(val.success);
                            openContainerLayer(".airtableKeys", ".airtablePull");
                        }
                }).fail( val => {
                        $(elem).html(val.responseText) 
                        console.log(val);
                    });


    };

    let importAndMerge = function(elem, input) {

            $.ajax({
                    url: `/{{data.brand}}/{{data.permit}}/data/importAndMerge/${input}`,
                    method: "GET",
                    success: val => {
                            console.log(val);
                            $(elem).html(val.success);
                            openContainerLayer('.airtablePull','.airtableDone');
                        }
                }).fail( val => {
                        $(elem).html(val.responseText);
                        console.log(val);
                    });

        };

    let reloadPjax = function() {

            let windowUrl = window.location.href; 
            $(".btn.pjaxTrigger.active").trigger("click");

        };


</script>
