<script>
    $(document).pjax('a[data-pjax]', '#pjax-container');

    $(document).ready(() => {

        fixtextareas();
        console.log('document is loaded');
        if ("{{data.input}}" == "n") console.log('Home loaded');
        if ("{{data.openLayer}}".length > 0 ) openLayer("{{data.openLayer}}");

    })

    $.pjax.defaults.scrollTo = false;
    $.pjax.defaults.timeout = false;

    let toggleClass = function(elem, name) {

        $(elem).toggleClass(name);

    }

    let cityPress = function(elem, name) {

        let citiesAreActive = $('.filters.cities > span.active').length > 0;
        let cityName = $(elem).attr("myName");

        if (citiesAreActive == false) {

            $('.filters.towns > span').addClass('d-none');
            $('.filters.towns').addClass('d-none');
            return;

        }

        $('.filters.towns').removeClass('d-none');

        let thisCityIsActive = $(elem).hasClass('active');

        if (thisCityIsActive == true) {

            $('.filters.towns').find(`[city=${cityName}]`).removeClass('d-none');

        } else {

            $('.filters.towns').find(`[city=${cityName}]`).addClass('d-none');
        }
    }

    let highToLow = function(elem) {
        $(elem).addClass('active');
        $(elem).siblings('.btn').removeClass('active');
    }

    let filterPress = function(elem) {

        let object = {
            cities: $('.filters.cities > span.active').map(function() {
                return $(this).attr('myName')
            }).get(),
            status: $('.filters.status > span.active').map(function() {
                return $(this).attr('myName')
            }).get(),
            sort: $('.filters.prices > span.active').map(function() {
                return $(this).attr('myName')
            }).get(),
        }

        if ($('.filters.cities > span.active').get().length > 0) {

            object.towns = $('.filters.cities > span.active').map(function() {
                let towns = $(`[city=${$(this).attr('myName')}].active`).map(function() {
                    return $(this).attr('myName');
                }).get();

                if (towns.length > 0) {
                    return towns;
                } else {
                    return null;
                }
            }).get();

        }

        let url = `/{{data.brand}}/{{data.permit}}/pjax/filterProperties/{{data.module}}?`;

        if (object.cities && object.cities.length > 0) {
            url += `cities=${object.cities}&`
        }

        if (object.towns && object.towns.length > 0) {
            console.table(object.towns);
            url += `towns=${object.towns}&`
        }

        if (object.status && object.status.length > 0) {
            url += `status=${object.status}&`
        }

        if (object.sort && object.sort.length > 0) {
            url += `sort=${object.sort}`
        }


        $('.btn.runFilter').attr({
            href: url
        }).trigger('click');

    }

    let toggleFilterBox = function(elem) {

        $(elem).toggleClass('active');
        $(elem).closest('.firstBox').toggleClass('close');

    }

    let openLayer = function(elem, me) {

        if ( $(me).attr('refreshwindow') == "true" ) {
            window.location.reload();
        };

        if ( $(elem).length > 0 ) {

            $('body > *').addClass('d-none');
            window.scrollTo(0, 0);
            $(elem).removeClass('d-none');

        } else {

            console.log(  `/{{data.brand}}/{{data.permit}}/page/landingPage/n?openLayer=${elem}` );
            window.location.assign( `/{{data.brand}}/{{data.permit}}/page/landingPage/n?openLayer=${elem}` );

        }

    }

    $('form').on('submit', function(event) {
        console.log('form is submitting');
        event.preventDefault();
    });

    let submitForm = function(elem) {

        console.log($(elem).closest('form').attr('url'));

        console.log($(elem).closest('form').serialize());

        $.ajax({
            url: $(elem).closest('form').attr('url'),
            data: $(elem).closest('form').serialize(),
            method: "POST",
            success: val => $(elem).closest('form').find('.btn.blue').html('SAVED SUCCESFULLY'),
            error: (request, status, error) => $(elem).closest('form').find('.btn.blue').html('FAILED. TRY AGAIN!') ,
        });

    };

    let changeConnected = function(elem, formName) {

        let currentVal = $(elem).val();
        let myName = $(elem).attr('name');
        $(`[formName=${formName}`).find(`[name=${myName}`).val(currentVal);

    };

    let saveInSession = function(elem, formName) {

        let data = $(elem).closest('form').serialize();

        $.ajax({
            url: `/{{data.brand}}/gen/data/saveInSession/${formName}`,
            data: data,
            method: "POST",
            success: val => console.log(val),
            error: (req,status,err) => console.log(err)
        });

    };

    let fixtextareas = function() {

        if ( $('textarea').length == 0 ) return console.log('no textarea present');

        let replaceValue = function(val) {

            return val.replace(/^ */gm,'');

        }

        $('textarea').map( function() {
            let currentVal = $(this).attr('myData');
            if ( currentVal == undefined) return;
            $(this).val(replaceValue(currentVal));
        });

        $('textarea').map( function() {
            let currentVal = $(this).attr('myPlaceholder');
            if ( currentVal == undefined) return;
            $(this).attr({ placeholder: replaceValue(currentVal) });
        });

    };

    let openWhatsApp = function(elem) {

        let msg = $(elem).closest('form').find('textarea').val();
        let url = `https://api.whatsapp.com/send/?phone&text=${encodeURIComponent(msg)}`;

        window.open(
          url,
          '_blank' 
        );

    };

    let allCards = {};

    $.get( "/{{data.brand}}/{{data.permit}}/data/offlineRequired/n", function( data ) {
        console.log(data);
        allCards = {
            authCards: data.allCards.authCards,
            Cards: data.allCards.Cards,
            forms: data.forms,
            endSalutation: data.salutation
        }
    });




    let cardSelect = function(elem, auth, data) {

        let updateMsgBox = function(cardType) {

            $(".right > button > span").html( allCards[cardType].length );

            let createMsg = function( cardType, formName) {

                console.log(allCards.forms);

                let object = {};
                object.sellingCards = allCards[cardType].filter( val => val.status == "Selling" );
                object.requiredCards = allCards[cardType].filter( val => val.status == "Required" ) ;
                object.salutation = allCards.forms[formName].elems.find( val => val.elem == "textarea" ).default;
                object.selling = "";
                object.required= "";
                object.endSalutation = "";
                
                if (object.sellingCards.length > 0) {

                    object.selling = "\r\n\r\n*Selling*"
                            + object.sellingCards.reduce( (total, val, index) => {
                        total += `\r\n\r\nPKR ${val.price}\r\n${val.city}, ${val.town} \r\n${val.size} \r\n${val.details} \r\n`;
                        return total;
                    }, "" )

                };

                if (object.requiredCards.length > 0) {

                    object.required = "\r\n\r\n*Required*"
                        + object.requiredCards.reduce( (total, val, index) => {
                            total += `\r\n\r\nPKR ${val.price}\r\n${val.city}, ${val.town} \r\n${val.size} \r\n${val.details} \r\n`;
                            return total;
                        }, "" );

                };

                if (cardType == "authCards") {
                    object.endSalutation = "\r\n\r\n"+allCards.endSalutation;
                }

                return object.salutation + object.selling + object.required + object.endSalutation;

            };


            if (cardType == "authCards") {

                    $(".msgBoxAdmin > textarea").val( createMsg( cardType, "msgBoxAdmin") );
                    saveInSession(".msgBoxAdmin > textarea", "msgBoxAdmin");

            } else {

                    $(".msgBoxClient > textarea").val( createMsg( cardType, "msgBoxClient" ) );
                    changeConnected( ".msgBoxClient > textarea", "contactForm" );
                    saveInSession( ".msgBoxClient > textarea", "msgBoxClient" );

            }


        };

        let updateCardInSession = function( { card, cardType, action } ) {

            // console.log( card, cardType, action, JSON.parse(data) );

            let newdata = {};
            switch(true) {

                case (cardType == "authCards" && action == "add"):
                    console.log("add this card to the session.authCards");
                    allCards.authCards.push( JSON.parse(data) );
                    newdata.myArray = allCards.authCards;
                    break;
                case (cardType == "authCards" && action == "remove"):
                    console.log("remove this card from session.authCards");
                    allCards.authCards  = allCards.authCards.filter( val => val._id != JSON.parse(data)._id );
                    newdata.myArray = allCards.authCards;
                    break;
                case (cardType == "Cards" && action == "add"):
                    console.log("add this card to the session.cards");
                    allCards.Cards.push( JSON.parse(data) );
                    newdata.myArray = allCards.Cards;
                    break;
                case (cardType == "Cards" && action == "remove"):
                    console.log("remove this card from the session.cards");
                    allCards.Cards  = allCards.Cards.filter( val => val._id != JSON.parse(data)._id );
                    newdata.myArray = allCards.Cards;
                    break;

            };

            console.log(allCards);

            $.ajax({
                url: `/{{data.brand}}/gen/data/saveInSession/${auth}`,
                data: newdata,
                method: "POST",
                success: val => updateMsgBox(cardType),
                error: (req,status,err) => console.log(err)
            });

        };

        $(elem).hasClass("select") ? updateCardInSession({card: elem, cardType: auth, action: "add"}): updateCardInSession({card: elem, cardType: auth, action: "remove"});

    };

    let createTicket = function(elem) {

            $(elem).closest('form').find('.btn.blue').html('CREATING TICKET...');

            let ticketCreated = function(val) {
                console.log(val);
                $(elem).closest('form').find('.btn.blue').html('TICKET CREATED');
                console.log('redirect to the showticket page');
                window.open( `/{{data.brand}}/gen/page/showTicket/${val._id}` );
            };

            $.ajax({
                url: `/{{data.brand}}/gen/data/ticketAndMail/n`,
                data: $(elem).closest('form').serialize(),
                method: "POST",
                success: val => ticketCreated(val),
                error: (request, status, error) => $(elem).closest('form').find('.btn.blue').html('FAILED. TRY AGAIN!') ,
            });

        };

    let openSlideEditor = function(elem, slide){

            let setEditable = function() {

                console.log(" alloting the attributes ");
                $(".slide-editor > .slide > div .e").attr({ onclick: "editable(this)" });

            };

            let style = `[style=${ $(elem).attr('style') }]`;

            if (slide == "new") {

                let updateElemId = function(val) {

                    $(".slide-editor > .slide").remove();
                    $(".slide-new").find(style).clone().appendTo(".slide-editor").removeClass('d-none')
                        .attr({ 
                            id : val,
                            sequence: $("#sortable > .sortable").length + 1
                            });
                    setEditable();
                };

                $.ajax({
                        url: "/{{data.brand}}/{{data.permit}}/data/getMongoId/n",
                        method: "GET",
                        success: val => updateElemId(val),
                        error: (err, status, response) => console.log(err)
                    });

            } else {
                let content = $(elem).attr('content');
                $(".slide-editor").find(".slide").remove();
                $(".slide-new").find(style).clone().appendTo(".slide-editor").html(content).removeClass('d-none')
                    .attr({ 
                            id : $(elem).attr('id'),
                            sequence: $(elem).attr('sequence')
                        });
                setEditable();
            }


    };

    let saveSlide = function(elem, content) {

            if ( $(elem).attr("id").match(/temp/g) ) {
                $(".saved-templates > .box-top > button").attr({refreshwindow: true});
            }

            if ( $(elem).closest(".formBox").hasClass("slide-editor") ) {
                $(".slide-editor > .box-top > button").attr({refreshwindow: true});
            }

            if ( content == undefined ) {
                let temp;
                temp = $(elem).closest(".slide-editor").clone();
                temp.find("*").removeAttr("contenteditable");
                console.log( temp.find(".e").attr("onclick").replace(/editable\(this\)/g,"") );
                temp.find(".e").attr({onclick: temp.find(".e").attr("onclick").replace(/editable\(this\)/g, "") });
                temp.find(".placeholder").remove();
                content = temp.find(".slide").html();
            }

            $.ajax({
                url: `/{{data.brand}}/{{data.permit}}/data/saveSlide/${ $(elem).attr('id') }`,
                data: {
                    style: $(elem).attr('style'),
                    sequence: $(elem).attr('sequence'),
                    content: content
                    },
                method: "POST",
                success: val => {
                    $(elem).attr({id: val._id});
                },
                error: (req,status,err) => console.log(err.responseText)
            });

        };

    let deleteMe = function(elem, collection) {

            let id = $(elem).attr('id');

            $.ajax({
                    url: `/{{data.brand}}/{{data.permit}}/data/deleteDocumentAuth/${collection}?_id=${id}`,
                    method: "POST",
                    success: val => $(elem).html('DELETED').closest('div').remove(),
                    error: (req,status, err) => $(elem).html('ERROR'),
                })

        };

    let editable = function(elem) {

            let type = $(elem).prop("tagName");

            console.log( $(elem).next() );

            if ( $(elem).next().hasClass("placeholder") ) { 
                    $(elem).next().remove();
                    return console.log( "Placeholder is already placed next to this element" );
                };

            $(elem).attr({contenteditable: true});

            let absoluteOrRelative = function() {

                    if ( $(elem).css("position") == "absolute" ) {

                            console.log( "making placeholder absolute" );
                            $(elem).next().css({position: "absolute"});

                        }

                };

            switch (true) {
                    case ( type == "IMG" ) :
                        console.log("Upload an Image or ADD the source of img below");
                        $(".placeholders > .img").clone().insertAfter( elem ).find("input:eq(0)").val( $(elem).attr("src") )
                            .closest("p").next().find(".btn.white")
                            .html( $(".btn.white").html() + ` ( ${ $(elem).css("width").match(/\d+/g) } x ${ $(elem).css("height").match(/\d+/g) } RATIO )` );
                        absoluteOrRelative();
                        break;
                    case ( type == "A" ) :
                        console.log("Add the SRC inpute below this button");
                        $(".placeholders > .href").clone().insertAfter( elem ).find("input").val( $(elem).attr("href") );
                        absoluteOrRelative();
                        break;
                    default: 
                        console.log("don't do anything");
                        break;
                }
        };

    let inputChanged = function(elem) {
            console.log("input value has been changed");
            let type = $(elem).closest(".placeholder").prev().prop("tagName");

            if (type == "IMG") {
                console.log( $(elem).closest(".placeholder").prev() );
                $(elem).closest(".placeholder").prev().attr({ src : $(elem).val() });
            } else if (type == "A") {
                $(elem).closest(".placeholder").prev().attr({ href : $(elem).val() });
            }
        };

    let navigateSlide = function(instr) {

        switch (true) {

            case ( instr == "left" ): 
                if ( $(".sliders>div.active").prev().length > 0 ) {
                    return navigateSlide( Number( $(".movers>div>button.active").html() ) - 2  );
                } else {
                    return navigateSlide( Number( $(".movers>div>button").last().html() ) - 1 );
                }
                break; 
            case ( instr == "right" ):
                if ( $(".sliders>div.active").next().length > 0 ) {
                    return navigateSlide( $(".movers>div>button.active").html() );
                } else {
                    return navigateSlide(0);
                }
                break; 
            default:
                $(".sliders > div").eq(instr).addClass("active").siblings().removeClass("active");
                $(".movers > div > *").eq(instr).addClass("active").siblings().removeClass("active");
                break;

        };

    };

</script>
