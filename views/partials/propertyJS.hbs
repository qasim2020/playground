<script>
    $(document).pjax('a[data-pjax]', '#pjax-container');

    $(document).ready(() => {

        fixtextareas();
        console.log('document is loaded');
        if ("{{data.input}}" == "n") return console.log('Home loaded');

    })

    $.pjax.defaults.scrollTo = false;
    $.pjax.defaults.timeout = false;

    let toggleClass = function(elem, name) {

        $(elem).toggleClass(name);

    }

    let cityPress = function(elem, name) {

        let citiesAreActive = $('.filters.cities > span.active').length > 0;
        let cityName = $(elem).attr("myName");

        if (citiesAreActive == false) {

            $('.filters.towns > span').addClass('d-none');
            $('.filters.towns').addClass('d-none');
            return;

        }

        $('.filters.towns').removeClass('d-none');

        let thisCityIsActive = $(elem).hasClass('active');

        if (thisCityIsActive == true) {

            $('.filters.towns').find(`[city=${cityName}]`).removeClass('d-none');

        } else {

            $('.filters.towns').find(`[city=${cityName}]`).addClass('d-none');
        }
    }

    let highToLow = function(elem) {
        $(elem).addClass('active');
        $(elem).siblings('.btn').removeClass('active');
    }

    let filterPress = function(elem) {

        let object = {
            cities: $('.filters.cities > span.active').map(function() {
                return $(this).attr('myName')
            }).get(),
            status: $('.filters.status > span.active').map(function() {
                return $(this).attr('myName')
            }).get(),
            sort: $('.filters.prices > span.active').map(function() {
                return $(this).attr('myName')
            }).get(),
        }

        if ($('.filters.cities > span.active').get().length > 0) {

            object.towns = $('.filters.cities > span.active').map(function() {
                let towns = $(`[city=${$(this).attr('myName')}].active`).map(function() {
                    return $(this).attr('myName');
                }).get();

                if (towns.length > 0) {
                    return towns;
                } else {
                    return null;
                }
            }).get();

        }

        let url = `/{{data.brand}}/{{data.permit}}/pjax/filterProperties/{{data.module}}?`;

        if (object.cities && object.cities.length > 0) {
            url += `cities=${object.cities}&`
        }

        if (object.towns && object.towns.length > 0) {
            console.table(object.towns);
            url += `towns=${object.towns}&`
        }

        if (object.status && object.status.length > 0) {
            url += `status=${object.status}&`
        }

        if (object.sort && object.sort.length > 0) {
            url += `sort=${object.sort}`
        }


        $('.btn.runFilter').attr({
            href: url
        }).trigger('click');

    }

    let toggleFilterBox = function(elem) {

        $(elem).toggleClass('active');
        $(elem).closest('.firstBox').toggleClass('close');

    }

    let openLayer = function(elem) {

        $('body > *').addClass('d-none');
        window.scrollTo(0, 0);
        $(elem).removeClass('d-none');

    }

    $('form').on('submit', function(event) {
        console.log('form is submitting');
        event.preventDefault();
    });

    let submitForm = function(elem) {

        console.log($(elem).attr('url'));

        if (elem.match('.editProperty')) {
            console.log('submit the edit property box');
            let status = $('.absolute-btns > span.active').attr('myName');
            console.log({
                status
            });
            $(elem).find('[name="status"]').val(status);
        }

        console.log($(elem).serialize());

        $.ajax({
            url: $(elem).attr('url'),
            data: $(elem).serialize(),
            method: "POST",
            success: val => console.log({
                val
            }),
            error: function(request, status, error) {
                console.log(request.responseText);
            }
        });

    };

    let saveInSession = function(elem) {

        let data = $(elem).closest('form').serialize();

        let formName = $(elem).closest('form').attr('formName');

            console.log(data, formName);
        $.ajax({
            url: `/{{data.brand}}/gen/data/saveInSession/${formName}`,
            data: data,
            method: "POST",
            success: val => console.log(val),
            error: (req,status,err) => console.log(err)
        });

    };

    let fixtextareas = function() {
            return;

        if ( $('textarea').length == 0 ) return console.log('no textarea present');

        let replaceValue = function(val) {

            return val.replace(/^ */gm,'');

        }

        $('textarea').map( function() {
            let currentVal = $(this).attr('myData');
            if ( currentVal == undefined) return;
            $(this).val(replaceValue(currentVal));
        });

    };

    let openWhatsApp = function(elem) {

        let msg = $(elem).closest('form').find('textarea').val();
        let url = `https://api.whatsapp.com/send/?phone&text=${encodeURIComponent(msg)}`;

        window.open(
          url,
          '_blank' 
        );

    };


    let allCards = {};

    $.get( "/{{data.brand}}/{{data.permit}}/data/offlineRequired/n", function( data ) {
        console.log(data);
        allCards = {
            authCards: data.allCards.authCards,
            Cards: data.allCards.Cards,
            forms: data.forms
        }
    });




    let cardSelect = function(elem, auth, data) {

        let updateMsgBox = function(cardType) {

            $(".right > button > span").html( allCards[cardType].length );

            let createMsg = function( cardType, formName) {

                    console.log(allCards.forms);

                let object = {};
                object.sellingCards = allCards[cardType].filter( val => val.status == "Selling" );
                object.requiredCards = allCards[cardType].filter( val => val.status == "Required" ) ;
                object.salutation = allCards.forms[formName].elems.find( val => val.elem == "textarea" ).default;
                object.selling = "";
                object.required= "";
                
                if (object.sellingCards.length > 0) {

                    object.selling = "\r\n\r\n*Selling*"
                            + object.sellingCards.reduce( (total, val, index) => {
                        total += `\r\n\r\nPKR ${val.price}\r\n${val.city}, ${val.town} \r\n${val.size} \r\n${val.details} \r\n`;
                        return total;
                    }, "" )

                };

                if (object.requiredCards.length > 0) {

                    object.required = "\r\n\r\n*Required*"
                        + object.requiredCards.reduce( (total, val, index) => {
                                total += `\r\n\r\nPKR ${val.price}\r\n${val.city}, ${val.town} \r\n${val.size} \r\n${val.details}`;
                                return total;
                            }, "" );

                };

                return object.salutation + object.selling + object.required;

            };


            if (cardType == "authCards") {

                    $(".msgBoxAdmin > textarea").val( createMsg( cardType, "msgBoxAdmin") );
                    saveInSession(".msgBoxAdmin > textarea");

            } else {

                    $(".msgBoxClient > textarea").val( createMsg( cardType, "msgBoxClient" ) );
                    saveInSession(".msgBoxClient > textarea");

            }


        };

        let updateCardInSession = function( { card, cardType, action } ) {

            // console.log( card, cardType, action, JSON.parse(data) );

            let newdata = {};
            switch(true) {

                case (cardType == "authCards" && action == "add"):
                    console.log("add this card to the session.authCards");
                    allCards.authCards.push( JSON.parse(data) );
                    newdata.myArray = allCards.authCards;
                    break;
                case (cardType == "authCards" && action == "remove"):
                    console.log("remove this card from session.authCards");
                    allCards.authCards  = allCards.authCards.filter( val => val._id != JSON.parse(data)._id );
                    newdata.myArray = allCards.authCards;
                    break;
                case (cardType == "Cards" && action == "add"):
                    console.log("add this card to the session.cards");
                    allCards.Cards.push( JSON.parse(data) );
                    newdata.myArray = allCards.Cards;
                    break;
                case (cardType == "Cards" && action == "remove"):
                    console.log("remove this card from the session.cards");
                    allCards.Cards  = allCards.Cards.filter( val => val._id != JSON.parse(data)._id );
                    newdata.myArray = allCards.Cards;
                    break;

            };

            console.log(allCards);

            $.ajax({
                url: `/{{data.brand}}/gen/data/saveInSession/${auth}`,
                data: newdata,
                method: "POST",
                success: val => updateMsgBox(cardType),
                error: (req,status,err) => console.log(err)
            });

        };

        $(elem).hasClass("select") ? updateCardInSession({card: elem, cardType: auth, action: "add"}): updateCardInSession({card: elem, cardType: auth, action: "remove"});

    };


</script>
