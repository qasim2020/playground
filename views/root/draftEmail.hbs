<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Emails | Edit</title>
    {{> root/shipEmailCss}}
    <style>

    .editor-box {
        width: 100%;
    }

    .editor-box > .post {
        max-width: 600px;
        margin: auto;
        margin-top: 20px;
    }
    
    .editor-box [contenteditable]:focus-visible {
        outline-color: transparent;
    }

    .controls, .inline-controls {
        display: flex;
        align-items: center;
        width: 100%;
        margin: auto;
        justify-content: center;
    }

    .controls > p, .inline-controls > p {
        padding: 10px;
        line-height: 1.0;
        background: whitesmoke;
        margin: 0 2px;
        font-weight: bold;
        margin-bottom: 10px;
    }

    .popover {
        z-index: 2;
        background: white;
        position: absolute;
        max-width: fit-content;
        font-size: 12px;
        padding: 10px;
        border-radius: 4px;
        font-weight: bold;
        line-height: 1.4;
        box-shadow: 0px 1px 4px lightgrey;
    }

    .popover > div {
        display: flex;
    }

    .popover > div > p {
        display: inline-block;
        padding: 5px;
        border: 1px solid whitesmoke;
        line-height: 1;
        margin: 0px;
    }

    .screen {
        position: fixed;
        left: 0px;
        top: 0px;
        height: 100vh;
        width: 100vw;
        z-index: 1;
    }

    </style>

</head>
<body>
    {{> root/shipEmailNav active="edit"}}
    <div class="container">

        <div class="controls">
            <p data-content="H1">H1</p>
            <p data-content="H3">H3</p>
            <p data-content="P">P</p>
            <p data-content="A">A</p>
            <p data-content="">Img + Link</p> <!-- Add Image + Add Link when clicked upon + Add caption -->
            <p data-content="UL">Bullets</p>
            <p data-content="OL">Numbered</p>
            <p data-content="HR">Separator</p>
        </div>

    </div>

    <div class="editor-box">
        <div class="post" data-id="{{data.output._id}}">
            {{{data.output.body}}}
        </div>
    </div>

    <div class="popover d-none"></div>
    <div class="screen d-none" onclick="$(this).addClass('d-none')"></div>

    <script src="https://kit.fontawesome.com/ae3de8bee6.js" crossorigin="anonymous"></script>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js" integrity="sha256-/xUj+3OJU5yExlq6GSYGSHk7tPXikynS7ogEvDej/m4=" crossorigin="anonymous"></script>
    <script>

        ( $(document).ready( ()=> {

            let activeElem, 
                activeColor, 
                stringTable = [];

            // what happens after an event & modules
            let myFuncs = {

                clickTopButtons: function(e) {
                    let newTag = myFuncs.createTag(e.currentTarget);
                    myFuncs.createCharTable(newTag);
                    myFuncs.saveDraftEmail();
                }, 

                clickTagInPost: function(e) {
                    console.log(e.currentTarget);
                    $(e.currentTarget).siblings().removeClass("active");
                    $(e.currentTarget).addClass("active");
                },

                saveDraftEmail: function() {

                    let _id = $(".post").attr("data-id");
                    let data = {
                        body: $(".post").html()
                    };

                    console.log("saving post...");
                    $(".success").removeClass("d-none").html("Saving...");

                    $.ajax({
                        url: `/{{data.brand}}/gen/data/saveDraftEmail/${_id}`,
                        data: data, 
                        method: "POST",
                        success: val => {
                            $(".success").addClass("d-none");
                        }, 
                    }).fail( err => {
                        $(".success").html("Error! Couldn't save.");
                        window.location.assign("/{{data.brand}}/gen/page/landingPage/n");

                    });

                }, 

                mouseUpKeyUpEditorBox: function(e) {

                    var text, span;

                    // TODO: if this is enter press > create a new similar item in the next row and place all text after it inside next element > delete this text from current element

                    
                    if (window.getSelection) {
                        text = window.getSelection().toString();
                    } else if (document.selection && document.selection.type != "Control") {
                        text = document.selection.createRange().text;
                    }

                    // when no highlighting save the text
                    if (text.length === 0) {
                        myFuncs.saveDraftEmail();
                        return;
                    } 

                    $(".popover").addClass("d-none");

                    if ( !([37,38,39,40].some(v => v == e.keyCode)) ) {
                        console.log("selection ended");
                        span = myFuncs.selectHTML();
                        myFuncs.showPopover( span , "show_styles");
                        activeElem = span;
                        $('.screen').removeClass('d-none');
                    };

                }, 

                clickScreen: function() {
                    $(activeElem).css({ "background-color": activeColor });
                    if ( $("temp").length > 0 ) {
                        while ( $("temp").get().length > 0 ) {
                            $("temp").get().forEach( el => {
                                // console.log( $("temp").html() );
                                $(el).replaceWith( $(el).html() );
                            });
                        };
                    };
                    $(".popover, .screen").addClass("d-none");
                    myFuncs.saveDraftEmail();
                },

                clickPopoverButtons: function(e) {
                    switch (true) {
                        case $(e.target).attr("data-content") == "bold":
                            myFuncs.replaceTag("STRONG", activeElem);
                            break;
                        case $(e.target).attr("data-content") == "underline":
                            myFuncs.replaceTag("U", activeElem);
                            break;
                        case $(e.target).attr("data-content") == "link":
                            let href = prompt("Please enter an href link");
                            $(activeElem).wrap(`<a href="${href}"></a>`);
                            break;
                    };
                    myFuncs.saveDraftEmail();
                }, 

                tagDeclaration: function(elem) {

                    switch (true) {

                        case ( $(elem).attr("data-content") == "H1" ):
                            return `<h1 style="
                                        background: #219653;
                                        padding: 7px 10px;
                                        width: fit-content;
                                        color: white !important;
                                        font-size: 21px !important;
                                        transform: rotate( -1deg);
                                        margin: 0px 0 25px 0;
                                        " contenteditable=true>
                                    type here</h1>`
                            break;

                        case ( $(elem).attr("data-content") == "H3" ):
                            return `<h3 contenteditable=true>type here</h3>`;
                            break;

                        case ( $(elem).attr("data-content") == "P" ):
                            return `
                                    <p style="
                                        font-size: 17px;
                                        line-height: 1.7;
                                        color: #333333;
                                        word-break: break-word;"
                                    contenteditable=true>
                                    type here</p>`;
                            break;

                        case ( $(elem).attr("data-content") == "A" ):
                            return `<a href="" style="
                                        font-size: 13px;
                                        line-height: 1.5;
                                        font-weight: bold;
                                        color: black;
                                        "
                                        contenteditable=true
                                        >
                                        {{data.verifyUrl}}
                                    </a> `;
                            break;

                        case ( $(elem).attr("data-content") == "UL" ):
                            return {
                                full: `<ul><li contenteditable=true>type here</li></ul>`,
                                short: `<li contenteditable=true>type here</li>`,
                            }
                            break;

                        case ( $(elem).attr("data-content") == "OL" ):
                            return {
                                full: `<ol><li contenteditable=true>type here</li></ol>`,
                                short: `<li contenteditable=true>type here</li>`,
                            }
                            break;

                        case ( $(elem).attr("data-content") == "HR" ):
                            return `<hr>`;
                            break;
                    };

                },

                // when you click the button on the top
                createTag: function(elem) {

                    let tag = this.tagDeclaration(elem);
                    let type = $(elem).attr("data-content");
                    let newTag;

                    if ($('.post > .active').length > 0) {

                        if (type != "UL" && type != "OL") {
                            newTag = $(tag).insertAfter('.post > .active');
                        } else if (type == "UL" && $(".post > ul.active").length > 0) {
                            newTag = $(".post > ul.active").append(tag.short);
                        } else if (type == "OL" && $(".post > ol.active").length > 0) {
                            newTag = $(".post > ol.active").append(tag.short);
                        } else {
                            newTag = $(tag.full).insertAfter('.post > .active');
                        };

                    } else {
                        $('.post').append(tag.full || tag);
                        newTag = $(".post > *:eq(-1)");
                    };

                    $(newTag).siblings().removeClass("active");
                    console.log(newTag);
                    $(newTag).addClass("active");

                    return newTag;

                },

                addClass: function(elem, className) {
                    $(elem).siblings().removeClass(className);
                    $(elem).addClass(className);
                },

                selectHTML: function() {
                    var range = window.getSelection().getRangeAt(0);
                    let select = document.createElement("temp");
                    select.style.backgroundColor = "yellow";
                    activeColor = select.style.backgroundColor || "";
                    select.appendChild(range.extractContents());
                    range.insertNode(select);
                    return select;
                },

                showPopover: function(elem, request) {
                  let data;
                    if (request == "show_styles") {
                      data = `
                      <div>
                          <p data-content='bold'>Bold</p>
                          <p data-content='underline'>Underline</p>
                          <p data-content='align_center'>Align Center</p>
                          <p data-content='link'>Link</p>
                      </div>
                      `;
                    } else if (request == "A") {
                        data = `
                        <p>A Tag</p>
                        <p>${ $(elem).attr("href") }</p>
                        <button data-action="editA">Edit</button>
                        <button data-action="deleteA">Delete</button>
                        <button data-action="cancelA">Cancel</button>
                        `;
                    }
                  $('.popover').html(data);
                  $('.popover').removeClass('d-none');

                  if ( $('.popover').hasClass("d-none") ) return console.log("popover disappeared");

                  let posn = {
                    left: $(elem).offset().left,
                    top: $(elem).offset().top,
                    right: $(elem).offset().right,
                    bottom: $(elem).offset().bottom
                  };

                  if ((posn.left + $('.popover').width()/2) > $(window).width()) {
                    return $('.popover').css({
                      left: "auto",
                      right: 5,
                      top: posn.top - $('.popover').height() - $(elem).height() - 20,
                    });
                  }

                  if ((posn.left < $('.popover').width()/2)) { // >
                    return $('.popover').css({
                      left: posn.left,
                      top: posn.top - $('.popover').height() - $(elem).height() - 20,
                    });
                  }

                  $('.popover').css({
                    left: posn.left - ($('.popover').width()/2),
                    top: posn.top - $('.popover').height() - $(elem).height() - 20,
                  });

                },

                replaceTag: function(tag, elem) {
                    let combinedArr = this.createCharTable( $("temp").closest("li, .active") );
                    // console.log("STARTS");
                    // console.log(combinedArr);
                    // console.log("ENDS");
                    let matrixMatch = this.matrixMatch(combinedArr, tag);
                    let buildNewTag = this.buildNewTag(combinedArr, tag, matrixMatch);
                    return true;
                }, 

                // returns the table of [ { t: t, style: STRONG } , .... ]
                createCharTable: function(elem) {

                    let text, id, html, index, currentTable, arr = [];

                    if ( (/UL|OL/g).test( $(elem).prop("tagName") ) ) {
                        elem = $(elem).find("*:eq(-1)");
                    } else {
                        elem = $(elem);
                    }

                    text = $(elem).text();

                    let getInnerContent = function(elem_temp) {
                        $(elem_temp).contents().get().forEach( (val, index) => {
                            if ( val.nodeType == 1 ) {
                                return getInnerContent(val);
                            };
                            $(val).text().split("").forEach( t => {
                                arr.push({
                                    t: t,
                                    style: $(val).parentsUntil(elem).get().map( val => {
                                        return {
                                            prop: $(val).prop("tagName"), 
                                            href: $(val).attr("href")
                                        };
                                    })
                                });
                            });
                        });
                        return true;
                    };

                    getInnerContent(elem);

                    return arr;

                },

                // returns true if all TEMP matches all new STRONG else returns false. 
                matrixMatch: function(arr, tagName) {
                    let showVal = (arr) => arr.forEach( val => console.log( val.t, val.style ) );
                    let match = arr.filter( val => {
                        let index = val.style.findIndex( temp => temp.prop == "TEMP" );
                        return index > -1 ;
                    });
                    let checkExactMatch = match.every( val => {
                        let indexOne = val.style.findIndex( temp => temp.prop == "TEMP" );
                        let indexTwo = val.style.findIndex( tag => tag.prop == tagName );
                        return indexOne > -1 && indexTwo > -1;
                    });
                    return checkExactMatch;
                },

                buildNewTag: function(arr, tagName, remove) {

                    let showVal = (arr) => arr.forEach( val => console.log( val.t, val.style ) );

                    let newArr = arr.map( val => {
                        let indexOne = val.style.findIndex( temp => temp.prop == "TEMP" );
                        let indexTwo = val.style.findIndex( tag => tag.prop == tagName );
                        if ( indexOne > -1 && indexTwo > -1 ) {
                            if (remove) {
                                val.style.splice( indexTwo, 1 );
                            }
                            return val
                        } else if ( indexOne > -1 ) {
                            val.style.push( { prop: tagName } );
                            return val;
                        };
                        return val;
                    });

                    let startATag = function(styleArr) {
                        let output = styleArr.reduce( (total, val, index) => {
                            switch (true) {
                                case (val.prop == "A"):
                                    total += `<a href='${val.href}'>`;
                                    break;
                                case (val.prop == "DIV"):
                                    total += "<div>";
                                    break;
                                case (val.prop == "STRONG"):
                                    total += "<strong>";
                                    break;
                                case (val.prop == "U"):
                                    total += "<u>";
                                    break;
                                case (val.prop == "I"):
                                    total += "<i>";
                                    break;
                                case (val.prop == "TEMP"):
                                    total += "<temp style='background-color: yellow'>";
                                    break;
                                default:
                                    return total;
                            }
                            return total;
                        }, "");
                        return output;
                    };

                    let closeATag = function(styleArr) {
                        let output = styleArr.reduce( (total, val, index) => {
                            switch (true) {
                                case (val.prop == "A"):
                                    total += `</a>`;
                                    break;
                                case (val.prop == "DIV"):
                                    total += "</div>";
                                    break;
                                case (val.prop == "STRONG"):
                                    total += "</strong>";
                                    break;
                                case (val.prop == "U"):
                                    total += "</u>";
                                    break;
                                case (val.prop == "I"):
                                    total += "</i>";
                                    break;
                                case (val.prop == "TEMP"):
                                    total += "</temp>";
                                    break;
                                default:
                                    return total;
                            }
                            return total;
                        }, "");
                        return output;
                    };
                    // </u></strong>

                    // what is in array 1 that is not in array 2 | [string, u] , [string, u, temp] => temp is new
                    let findDifferenceInArrays = function( src, dest ) {
                        let temp_arr = {
                            close: [],
                            open: []
                        };
                        src.forEach( val => {
                            let index = dest.findIndex( v => v.prop === val.prop );
                            if (index === -1) {
                                temp_arr.close.push(val);
                            };
                        });
                        dest.forEach( val => {
                            let index = src.findIndex( v => v.prop === val.prop );
                            if (index === -1) {
                                temp_arr.open.unshift(val);
                            };
                        });
                        return temp_arr;
                    }

                    let removeDuplicateTemps = function(temp_arr) {
                        return temp_arr.map( val => {
                            return {
                                t: val.t, 
                                style: [...new Set(val.style)]
                            }
                        });
                    };

                    newArr = removeDuplicateTemps(newArr);
                    showVal(newArr);
                    let currentTag = startATag(arr[0].style) ;

                    let newTag = newArr.reduce((total, val, index)  => {

                        let nextArrStyle = newArr[index + 1] === undefined ? [] : newArr[index + 1].style;

                        let diff = findDifferenceInArrays( val.style, nextArrStyle );

                        if (diff.open.length === 0 && diff.close.length === 0) return total += val.t;

                        let tempString = "";
                        tempString += val.t;
                        tempString += closeATag( diff.close );
                        tempString += startATag( diff.open );

                        total += tempString;
                        return total;


                    }, currentTag);

                    $("temp").closest("li, .active").html(newTag);

                },

                hoverOverA: function(e) {

                    $(".post a").each( (key, val) => { 
                        console.log(key);
                        console.log( $(val).attr("temp-id") );
                        $(val).removeAttr("temp-id") ;
                    });

                    $(e.target).attr({"temp-id": "active"});
                    myFuncs.showPopover(e.target, "A", $(e.target).attr("href"));

                },

                editALink: function(e) {
                    $(".popover").addClass("d-none");
                    let href = prompt("Please enter an href link");
                    $("[temp-id='active']").attr({href: href});
                    console.log("done changed the link");
                    myFuncs.clickScreen();
                }, 

                deleteALink: function(e) {
                    $(".popover").addClass("d-none");
                    let el = $("[temp-id='active']");
                    $(el).replaceWith( $(el).html() );
                    console.log("done removed the link");
                    myFuncs.clickScreen();
                }, 

                cancelALink: function(e) {
                    $(".popover").addClass("d-none");
                }, 

            };

            // events
            $(document).on('click', '.controls > p', myFuncs.clickTopButtons);
            $(document).on('click', '.post > *', myFuncs.clickTagInPost) 
            $(document).on('mouseup keyup', '.editor-box', myFuncs.mouseUpKeyUpEditorBox);
            $(document).on('click', '.screen', myFuncs.clickScreen);
            $(document).on('click', '.popover > div > p', myFuncs.clickPopoverButtons);

            // A tag events
            $(document).on('hover, mouseover', '.post a', myFuncs.hoverOverA) 
            $(document).on('click', '.popover > [data-action=editA]', myFuncs.editALink);
            $(document).on('click', '.popover > [data-action=deleteA]', myFuncs.deleteALink);
            $(document).on('click', '.popover > [data-action=cancelA]', myFuncs.cancelALink);
        }));

    </script>
</body>
</html>
