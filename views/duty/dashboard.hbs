<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Dashboard</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <style>
        * {
            font-family: "arial";
        }
        body.black {
            background: black;
        }
        body.white {
            background: white;
        }
        .d-none {
            display: none;
        }
        button,
        nav > a {
            cursor: pointer;
            background: white;
            border: 2px solid black;
            padding: 8px;
            display: block;
            font-size: 13px;
            text-decoration: none;
            color: black;
            font-family: "arial";
        }
        nav > button {
            border-right: 1px solid black;
        }
        .grid > button:hover {
            opacity: 0.6;
        }
        .grid > button {
            background: black;
            border-color: black;
            color: white;
            cursor: pointer;
            font-weight: bold;
        }
        button.active {
            background: black;
            font-weight: bold;
            color: white;
        }
        nav > a {
            border-right: 2px solid black;
            background: #fbe9e7;
            color: #bf360c;
        }
        nav {
            display: flex;
            align-items: center;
            justify-content: center;
            margin-bottom: 10px;
        }
        .layer.profile > .flex-center {
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            min-height: 90vh;
            font-size: 1.4rem;
            display: flex;
            color: white;
            background: black;
        }
        .layer.notify {
            background: black;
            height: 90vh;
            max-height: 100%;
            padding-top: 4px;
        }
        .tasks > .grid {
            display: grid;
            grid-template-columns: repeat(3,minmax(77px, auto)) minmax(170px,auto) minmax(155px, 900px) minmax(104px, auto);
            grid-gap: 2px;
            margin: 0px;
            padding: 0px;
            margin-bottom: 3px;
        }
        .tasks > .bar {
            display: flex;
            align-items: center;
            justify-content: center;
            margin: 10px 0;
        }
        .tasks > .bar > button {
            max-width: 600px;
            width: 100%;
        }
        .tasks > .grid > p {
            background: lightcyan;
            margin: 0px;
            padding: 10px;
        }
        .tasks > .grid > .text-center {
            display: flex;
            align-items: center;
            justify-content: center;
        }
        .summary > table {
            margin: auto;
            max-width: 98%;
            width: 600px;
            background: black;
        }
        .summary > table th, 
        .summary > table td {
            text-align: center;
            background: white;
            padding: 10px;
        }
        form {
            max-width: 80vw;
            width: 600px;
            padding: 30px 20px;
            border: 2px solid black;
            background: white;
            border-radius: 5px;
            margin: auto;
            margin-bottom: 6px;
        }

        form > * {
            display: block;
            margin-bottom: 10px;
            padding: 5px 0px;
            width: 100%;
            font-weight: bold;
        }

        form > h1 {
            font-size: 20px;
            text-align: center;
            margin: 0px;
            margin-bottom: 19px;
        }

        form > input {
            padding: 11px 5px;
            background: white;
            border: 1px solid black;
            font-size: 16px;
            box-sizing: border-box;
        }

        form > .looksBtn, 
        form > button {
            padding: 11px 5px;
            border: 1px solid black;
            background: black;
            color: white;
            font-size: 15px;
            width: 100%;
            font-weight: bold;
            margin-top: 20px;
            text-align: center;
            box-sizing: border-box;
        }
        @media only screen and (max-width: 600px) {
            .tasks > .grid {
                grid-template-columns: repeat(auto-fill, minmax(100%, 1fr));
                margin-bottom: 4px;
                border: 2px solid black;
            }
            .summary > table {
                margin: auto;
                width: auto;
            }

        }
    </style>
</head>
<body>

    <nav>

        <button trigger="profile" onclick="openLayer('.profile', this)">Profile</button>
        <button trigger="tasks" onclick="openLayer('.tasks', this)" class="active">Tasks</button>
        <button trigger="summary" onclick="openLayer('.summary', this)">Summary</button>
        <button trigger="notify" onclick="openLayer('.notify', this)">Notify</button>
        <a href="/duty/auth/page/destroySession/landingPage">Log Out</a>

    </nav>
    
    <div class="layer profile d-none" body="black">

        <div class="flex-center">
            <div>{{data.user.name}}</div>
            <div>{{data.user.email}}</div>
            <div>{{data.user.mobile}}</div>
            <div>{{data.user.role}}</div>
            <a href="/duty/auth/page/deleteMyAccount/n">Delete my account</a>
        </div>

    </div>

    <div class="layer tasks" body="white">

        <div class="bar">
            <button class="saving" onclick="addTasks()">Add tasks</button>
        </div>
        {{#each data.tasks}}
        <div class="grid" id="{{this._id}}">
            <button onclick="deleteMe(this)">Delete</button>
            <p my_name="date" editable class="text-center" contenteditable=true>{{this.date}}</p>
            <p my_name="time" editable class="text-center" contenteditable=true>{{this.time}}</p>
            <p my_name="subject" editable class="text-center" contenteditable=true>{{this.subject}}</p>
            <p my_name="comment" editable contenteditable=true>{{this.comment}}</p>
            <p my_name="notify" editable class="text-center" contenteditable=true>{{this.notify}}</p>
        </div>
        {{/each}}

    </div>

    <div class="layer summary d-none" body="white">
        <table>
            <tr>
                <th>Task</th>
                <th>Last executed</th>
            </tr>
            {{#each data.summary}}
            <tr>
                <td>{{this.subject}}</td>
                <td>{{this.diff}} days ago</td>
            </tr>
            {{/each}}
        </table>
    </div>

    <div class="layer notify d-none" body="black">

        <form action="" class="telegram-id-form">
            <h1>Telegram Id</h1>
            <label for="telegramId">Your telegramId</label>
            <input required type="text" name="telegramId" value="{{data.user.telegramId}}">
            <button type="submit">Submit</button>
            <p class="looksBtn" onclick="triggerTelegramNotification(this)">Test trigger a notification</p>
        </form>

        <form action="">
            <h1>Trigger</h1>
            <label for="time">Time of day you receive the notification</label>
            <input required type="time" name="time">
            <button type="submit">Submit</button>
        </form>

    </div>

    <script src="https://code.jquery.com/jquery-3.3.1.min.js"  integrity="sha256-FgpCb/KJQlLNfOu91ta32o/NMZxltwRo8QtmkMRdAu8="  crossorigin="anonymous"></script>
    <script>
        let urlParams = function() {

            let url = {
                origin: window.location.origin, 
                brand: window.location.pathname.split("/")[1],
                permit: window.location.pathname.split("/")[2],
                requiredType: window.location.pathname.split("/")[3],
                module: window.location.pathname.split("/")[4],
                input: window.location.pathname.split("/")[5],
            };

            return url;

        };

        $(".layer").addClass("d-none");
        $(`.${urlParams().input}`).removeClass("d-none");
        $(`[trigger=${urlParams().input}]`).addClass("active").siblings().removeClass("active");
        $("body").removeAttr("class").addClass( $(`.${urlParams().input}`).attr("body") );

        let openLayer = function (elem, me) {

            $(".layer").addClass("d-none");
            $(me).siblings().removeClass("active");
            $(me).addClass("active");
            $(elem).removeClass("d-none");
            if (history.pushState) {
                let firstPart = window.location.pathname.split("/dutyDashboard/")[0];
                let lastPart = "/dutyDashboard/" + elem.replace(".","");
                let newurl = 
                    window.location.origin +
                    firstPart +
                    lastPart;
                window.history.pushState({path:newurl},'',newurl);
            }
            $("body").removeAttr("class").addClass( $(elem).attr("body") );

        };

        let addTasks = function() {

            let html = `
                <div class="grid no_mongo_id">
                    <button onclick="deleteMe(this)">Delete</button>
                    <p my_name="date" editable class="text-center" contenteditable=true>Date</p>
                    <p my_name="time" editable class="text-center" contenteditable=true>Time</p>
                    <p my_name="subject" editable class="text-center" contenteditable=true>Subject</p>
                    <p my_name="comment" editable contenteditable=true>Commennt</p>
                    <p my_name="notify" editable class="text-center" contenteditable=true>Notify</p>
                </div>
            `;

            $(html).insertAfter(".layer.tasks > .bar");

            $(".saving").html("Fetching a new mongo Id");

            $.get("/duty/auth/data/getMongoId/n", function( data, status ){
                if (status != "success") return alert("could not get the id");
                console.log(data, status);
                $(".saving").html("Add tasks");
                $(".no_mongo_id").attr({id: data}).removeClass("no_mongo_id");
            });

        };

        $(document).on("keyup", "[editable]", function(e) {

            $(".saving").html("Saving...");
            let _id = $(e.target).closest(".grid").attr("id");

            if (_id == undefined) {
                $(".saving").html("Couldn't find the document id. Waiting for an Id...");
                return ;
            };

            let data = {
                [$(e.target).attr("my_name")]: $(e.target).html()
            };

            console.log({data});

            $.ajax({
                url: `/duty/auth/data/updateDocumentAuth/tasks?_id=${_id}`,
                method: "POST",
                data: data,
                success: val => {
                    console.log(val);
                    $(".saving").html("Add tasks");
                },
            }).fail( err => {
                console.log(err);
                $(".saving").html(err.responseText);
            }); 

        });

        let deleteMe = function(elem) {

            let _id = $(elem).closest(".grid").attr("id");
            $(".saving").html("Deleting...");
            $.ajax({
                url: `/duty/auth/data/deleteDocumentAuth/tasks?_id=${_id}`,
                method: "GET",
                success: val => {
                    console.log(val);
                    $(".saving").html("Add tasks");
                    $(elem).closest(".grid").remove();
                }
            }).fail( err => {
                console.log(err);
                $(".saving").html("Error while deleting");
            });

        };

        $('.telegram-id-form').on('submit',function(e) {
            $(this).find('[type="submit"]').html("Sending...");
            e.preventDefault();
            console.log ( $(this).serialize() );
            $.ajax({
                method: "POST",
                url: '/duty/gen/data/storeTelegramId/n',
                data: $(this).serialize(),
                success: val => {
                    console.log(val);
                    $(this).find('[type="submit"]').html("Id stored.");
                }
            }).fail( err => {
                console.log(err);
                $(this).find('[type="submit"]').html(err.responseText);
            });
        });

        let triggerTelegramNotification = function(elem) {
	    $(elem).html("Sending...");
            $.ajax({
                method: "GET",
                url: '/duty/gen/data/sendDutySummaryOnTelegram/n',
                success: val => {
                    console.log(val);
                    $(elem).html("Notification sent to your telegram app.");
                }
            }).fail( err => {
                console.log(err);
                $(elem).html(err.responseText);
            });
            
        };

    </script>
    
</body>
</html>
